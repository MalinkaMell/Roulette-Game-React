{"version":3,"sources":["components/weel/Weel.js","components/chips/Chips.js","components/table/Table.js","App.js","serviceWorker.js","index.js"],"names":["Weel","props","renderNumber","className","state","text","renderBtnText","spinAngleStart","Math","random","spinTimeTotal","startAngle","spinTime","arc","PI","options","length","spinTimer","baseSize","handleOnClick","bind","spin","rotate","this","drawRouletteWheel","stopRotateWheel","ctx","canvas","refs","getContext","outsideRadius","textRadius","insideRadius","font","i","angle","fillStyle","color","beginPath","fill","save","translate","cos","sin","number","fillText","measureText","width","restore","strokeStyle","lineWidth","lineTo","stroke","setState","clearTimeout","spinAngle","easeOut","setTimeout","degrees","arcd","index","floor","updateNum","t","b","c","d","ts","type","value","id","onClick","Fragment","ref","height","arr","Button","size","block","variant","React","Component","Chip","active","RouletteTable","firstRow","firstBorder","secondRow","secondBorder","thirdRow","thirdBorder","fourthRow","fifthRow","columnLeft","columnRight","numsSelectionHandler","num","whichRow","coins","nums","row","indexOf","splice","chip","updatedRow","map","n","visible","updateRow","push","updateArr","updateCoins","key","OverlayTrigger","overlay","Tooltip","disabled","App","count","wins","losses","message","extArr","twoByOneFirst","twoByOneSecond","twoByOneThird","firstTwelves","secondTwelves","thirdTwelves","oneToEighteen","nineteenToThirtySix","black","red","even","odd","userLost","resetGame","userWin","multi","parseInt","determineValidBets","element","multiplier","filter","isItMyNum","console","log","determineValidBetsColFive","name","arrName","item","val","Container","Row","Image","src","fluid","Col","md","join","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ed1dcd8e.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Button, Image } from 'react-bootstrap';\r\nimport './Weel.css';\r\nimport options from '../options.json';\r\n\r\n\r\nclass Weel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      spinAngleStart: Math.random() * 10 + 10,\r\n      spinTimeTotal: Math.random() * 3 + 4 * 1000,\r\n      startAngle: 0,\r\n      spinTime: 0,\r\n      arc: Math.PI / (options.length / 2),\r\n      text: \"\"\r\n    }\r\n    this.spinTimer = null;\r\n    this.baseSize = 200;\r\n    this.handleOnClick = this.handleOnClick.bind(this);\r\n    this.spin = this.spin.bind(this);\r\n    this.rotate = this.rotate.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.drawRouletteWheel();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.stopRotateWheel()\r\n  }\r\n\r\n  drawRouletteWheel() {\r\n    const baseSize = this.baseSize;\r\n    let { startAngle, arc } = this.state;\r\n    let ctx;\r\n    const canvas = this.refs.canvas;\r\n    if (canvas.getContext) {\r\n      const outsideRadius = baseSize - 25;\r\n      const textRadius = baseSize - 45;\r\n      const insideRadius = baseSize - 85;\r\n      const innderOutline = baseSize - 125;\r\n      ctx = canvas.getContext('2d');\r\n      // ctx.clearRect(0, 0, 400, 400);\r\n\r\n      ctx.font = '14px Helvetica, Arial';\r\n      for (let i = 0; i < options.length; i++) {\r\n        const angle = startAngle + i * arc;\r\n        ctx.fillStyle = options[i].color;\r\n        ctx.beginPath();\r\n        ctx.arc(baseSize, baseSize, outsideRadius, angle, angle + arc, false);\r\n        ctx.arc(baseSize, baseSize, insideRadius, angle + arc, angle, true);\r\n        ctx.fill();\r\n        ctx.save();\r\n        ctx.fillStyle = 'white';\r\n        ctx.translate(baseSize + Math.cos(angle + arc / 2) * textRadius,\r\n          baseSize + Math.sin(angle + arc / 2) * textRadius);\r\n        ctx.rotate(angle + arc / 2 + Math.PI / 2);\r\n        const text = options[i].number;\r\n        ctx.fillText(text, -ctx.measureText(text).width / 2, 0);\r\n        ctx.restore();\r\n      }\r\n      //Arrow\r\n      ctx.strokeStyle = 'yellow'; //arrow\r\n      ctx.lineWidth = 2; //arrow\r\n      ctx.fillStyle = 'red';\r\n      ctx.beginPath();\r\n      ctx.lineTo(baseSize + 10, baseSize - (outsideRadius + 20));\r\n      ctx.lineTo(baseSize + 0, baseSize - (outsideRadius - 5));\r\n      ctx.lineTo(baseSize - 10, baseSize - (outsideRadius + 20));\r\n      ctx.fill();\r\n      ctx.stroke();\r\n    }\r\n  }\r\n\r\n  spin() {\r\n    this.spinTimer = null;\r\n    this.setState({ spinTime: 0 }, () => this.rotate());\r\n  }\r\n\r\n  rotate() {\r\n    const { spinAngleStart, spinTime, startAngle, spinTimeTotal } = this.state;\r\n    if (spinTime > 2800) {\r\n      clearTimeout(this.spinTimer);\r\n      this.stopRotateWheel();\r\n    } else {\r\n      const spinAngle = spinAngleStart - this.easeOut(spinTime, 0, spinAngleStart, spinTimeTotal);\r\n      this.setState({\r\n        startAngle: startAngle + spinAngle * Math.PI / 180,\r\n        spinTime: spinTime + 10,\r\n      }, () => {\r\n        this.drawRouletteWheel();\r\n        clearTimeout(this.spinTimer);\r\n        this.spinTimer = setTimeout(() => this.rotate(), 30);\r\n      })\r\n    }\r\n  }\r\n\r\n  stopRotateWheel() {\r\n    let { startAngle, arc } = this.state;\r\n    const canvas = this.refs.canvas;\r\n    const ctx = canvas.getContext('2d');\r\n    const degrees = startAngle * 180 / Math.PI + 90;\r\n    const arcd = arc * 180 / Math.PI;\r\n    const index = Math.floor((360 - degrees % 360) / arcd);\r\n    ctx.save();\r\n    const text = options[index].number;\r\n    this.setState({ text })\r\n    ctx.restore();\r\n    this.props.updateNum(this.state.text);\r\n  }\r\n\r\n\r\n  easeOut(t, b, c, d) {\r\n    const ts = (t /= d) * t;\r\n    const tc = ts * t;\r\n    return b + c * (tc + -3 * ts + 3 * t);\r\n  }\r\n\r\n  handleOnClick() {\r\n    this.spin();\r\n  }\r\n\r\n  SpinButton() {\r\n\r\n    return (\r\n      <div>\r\n        <input type=\"button\" value=\"spin\" className=\"btn btn-primary p-2 m-2\" id=\"spin\" onClick={this.handleOnClick} />\r\n      </div>\r\n    );\r\n\r\n  }\r\n\r\n  renderNumber = () => {\r\n    return (\r\n      <h1 className=\"blinky-number display-4 pt-1 m-0\">{this.state.text}</h1>\r\n    )\r\n  }\r\n  renderBtnText = () => {\r\n    if (this.state.text !== \"\") {\r\n      return (\r\n        <div>\r\n          {this.renderNumber()}\r\n        </div>\r\n      )\r\n    } else {\r\n      return (<h6 className=\"blink text-uppercase m-0\">Put your bets and spin the weel!</h6>)\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <React.Fragment>\r\n\r\n        <div className=\"roulette-container  align-self-start\">\r\n          <canvas ref=\"canvas\" width={this.baseSize * 2} height={this.baseSize * 2} className=\"roulette-canvas\"></canvas>\r\n          {this.props.arr.length !== 0 ?\r\n            <Button\r\n              onClick={this.handleOnClick}\r\n              className=\"m-2 spin-button\"\r\n              size=\"lg\"\r\n              block variant=\"danger\">\r\n              <h5 className=\"blink text-uppercase m-0\">Spin the weel!</h5>\r\n            </Button>\r\n            :\r\n            <Button\r\n              className=\"m-2 spin-button text-small\"\r\n              size=\"lg\"\r\n              block variant=\"dark\">\r\n              {this.renderBtnText()}\r\n            </Button>\r\n\r\n          }\r\n        </div>\r\n      </React.Fragment>\r\n\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default Weel;\r\n","import React from 'react';\r\nimport './Chips.css';\r\n\r\nclass Chip extends React.Component {\r\n\r\n  render() {\r\n    if (this.props.active) {\r\n      return (\r\n        <div className=\"chip d-inline-block\" id={this.props.id} >10</div>\r\n      )\r\n    } else {\r\n      return <div>{this.props.id}</div>\r\n    }\r\n    \r\n  }\r\n}\r\n\r\nexport default Chip;","import React from 'react';\r\nimport './Table.css';\r\nimport Chip from '../chips/Chips';\r\nimport { Overlay, OverlayTrigger, Tooltip, Button } from 'react-bootstrap';\r\n\r\n\r\nclass RouletteTable extends React.Component {\r\n\r\n  state = {\r\n    /* JSONS ROWS */\r\n    firstRow: this.props.firstRow,\r\n    firstBorder: this.props.firstBorder,\r\n    secondRow: this.props.secondRow,\r\n    secondBorder: this.props.secondBorder,\r\n    thirdRow: this.props.thirdRow,\r\n    thirdBorder: this.props.thirdBorder,\r\n    fourthRow: this.props.fourthRow,\r\n    fifthRow: this.props.fifthRow,\r\n    columnLeft: this.props.columnLeft,\r\n    columnRight: this.props.columnRight\r\n    /* END JSONS ROWS */\r\n  }\r\n\r\n  //SELECTING BETS\r\n  numsSelectionHandler = (num, whichRow) => {\r\n\r\n    //checking if my props.arr is empty, if it is, leave empty, if it is not, spread it\r\n    let nums = this.props.arr.length === 0 ? [] : [...this.props.arr];\r\n\r\n    //saving in a variable the row from state with that name\r\n    let row = [...this.state[whichRow]];\r\n\r\n    //variable for coins\r\n    let coins;\r\n\r\n    //checking if my winner number is presented in the array\r\n\r\n    /* BETS DESELECT HANDLING STARTS */\r\n\r\n    if (nums.indexOf(num) >= 0) { //if number is present in array, deselect and remove it from array\r\n\r\n      nums.splice(nums.indexOf(num), 1);\r\n\r\n      //giving back coins i bet on this number\r\n      coins = this.props.coins + this.props.chip;\r\n\r\n      //tricky part: map each of the rows and check if chip is vivible, if it is, remove it\r\n      let updatedRow = row.map(chip => {\r\n        if (chip.n == num) {\r\n          chip.visible = false;\r\n        }\r\n        return chip;\r\n      });\r\n\r\n      this.props.updateRow(whichRow, updatedRow); //passing back to Roulette.js component updated props\r\n\r\n      this.setState({ [whichRow]: updatedRow }); //seting the new state with removed chips from the rows\r\n\r\n      /* BETS DESELECT HANDLING ENDS */\r\n\r\n      /* BETS SELECT HANDLING START */\r\n\r\n    } else if (nums.indexOf(num) === -1) { //if number is NOT present in array, select it and put the chip on it\r\n\r\n      //decrementing coins \r\n      coins = this.props.coins - this.props.chip;\r\n\r\n      nums.push(num); //adding selected number to the array of bets\r\n\r\n      //tricky part inverted: map each of the rows and check if chip is vivible, if it is NOT, add it\r\n      let updatedRow = row.map(chip => {\r\n        if (chip.n == num) {\r\n          chip.visible = true;\r\n        }\r\n        return chip;\r\n      });\r\n\r\n      this.setState({ [whichRow]: updatedRow }); //setting the new state with added chips to the rows\r\n\r\n    }\r\n\r\n    //passing back to Roulette.js the updated array\r\n    this.props.updateArr(nums)\r\n\r\n    //passing back to Roulette.js updated coins count\r\n    this.setState({ coins: coins }, () => { this.props.updateCoins(coins) })\r\n\r\n  }\r\n\r\n  render() {\r\n\r\n    //designing the whole table in pure CSS mapping JSON objects with numbers, borders etc.\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"d-flex flex-row align-items-start roulette-table\">\r\n          <div className=\"align-self-start\">\r\n            <ul className=\"list-unstyled pt-6\">\r\n              {\r\n                this.state.columnLeft.map((num, index, arr) =>\r\n                  <li\r\n                    key={num.n + index + arr}\r\n                    className={num.className + \" no-cursor\"}\r\n                    value={num.n}\r\n                  >\r\n                    <OverlayTrigger overlay={<Tooltip id=\"tooltip-disabled\">No bets on {num.n}!</Tooltip>}>\r\n                      <span className=\"d-inline-block\">\r\n                        {num.n}\r\n                      </span>\r\n                    </OverlayTrigger>\r\n                  </li>)\r\n              }\r\n            </ul>\r\n          </div>\r\n          <div className=\"align-self-start\">\r\n            <div className=\"table-divider\"></div>\r\n            {/* First row */}\r\n            <ul className=\"d-flex list-unstyled\">\r\n              { \r\n                this.state.firstRow.map((num, index, arr) =>\r\n                  <button\r\n                    key={num.n + index + arr}\r\n                    className={num.className}\r\n                    value={num.n}\r\n                    onClick={() => this.numsSelectionHandler(num.n, \"firstRow\")}>\r\n                    <Chip\r\n                      id={num.n}\r\n                      active={num.visible} />\r\n                  </button>)\r\n              }\r\n            </ul>\r\n            {/* Between first and second rows borders */}\r\n            <ul className=\"d-flex list-unstyled\">\r\n              {\r\n                this.state.firstBorder.map((num, index, arr) =>\r\n                  <button\r\n                    key={num.n + index + arr}\r\n                    className={num.className}\r\n                    value={num.n}\r\n                    onClick={() => this.numsSelectionHandler(num.n, \"firstBorder\")}>\r\n                    <Chip\r\n                      id={num.n}\r\n                      active={num.visible} />\r\n                  </button>)\r\n              }\r\n            </ul>\r\n            {/* Second row */}\r\n            <ul className=\"d-flex list-unstyled\">\r\n              {\r\n                this.state.secondRow.map((num, index, arr) =>\r\n                  <button\r\n                    key={num.n + index + arr}\r\n                    className={num.className}\r\n                    value={num.n}\r\n                    onClick={() => this.numsSelectionHandler(num.n, \"secondRow\")}>\r\n                    <Chip\r\n                      id={num.n}\r\n                      active={num.visible} />\r\n                  </button>)\r\n              }\r\n            </ul>\r\n            {/* Between second and thirs rows borders */}\r\n            <ul className=\"d-flex list-unstyled\">\r\n              {\r\n                this.state.secondBorder.map((num, index, arr) =>\r\n                  <button\r\n                    key={num.n + index + arr}\r\n                    className={num.className}\r\n                    value={num.n}\r\n                    onClick={() => this.numsSelectionHandler(num.n, \"secondBorder\")}>\r\n                    <Chip\r\n                      id={num.n}\r\n                      active={num.visible} />\r\n                  </button>)\r\n              }\r\n            </ul>\r\n            {/* Third row */}\r\n            <ul className=\"d-flex list-unstyled\">\r\n              {\r\n                this.state.thirdRow.map((num, index, arr) =>\r\n                  <button\r\n                    key={num.n + index + arr}\r\n                    className={num.className}\r\n                    value={num.n}\r\n                    onClick={() => this.numsSelectionHandler(num.n, \"thirdRow\")}>\r\n                    <Chip\r\n                      id={num.n}\r\n                      active={num.visible} />\r\n                  </button>)\r\n              }\r\n            </ul>\r\n            {/* Between second and thirs rows borders */}\r\n            <ul className=\"d-flex list-unstyled\">\r\n              {\r\n                this.state.thirdBorder.map((num, index, arr) =>\r\n                  <button\r\n                    key={num.n + index + arr}\r\n                    className={num.className}\r\n                    value={num.n}\r\n                    onClick={() => this.numsSelectionHandler(num.n, \"thirdBorder\")}>\r\n                    <Chip\r\n                      id={num.n}\r\n                      active={num.visible} />\r\n                  </button>)\r\n              }\r\n            </ul>\r\n            {/* Fourth row */}\r\n            <ul className=\"d-flex list-unstyled\">\r\n              {\r\n                this.state.fourthRow.map((num, index, arr) =>\r\n                  <button\r\n                    key={num.n + index + arr}\r\n                    className={num.className}\r\n                    value={num.n}\r\n                    onClick={() => this.numsSelectionHandler(num.n, \"fourthRow\")}\r\n                    disabled={num.disabled}\r\n                  >\r\n                    <Chip\r\n                      id={num.n}\r\n                      active={num.visible} />\r\n                  </button>)\r\n              }\r\n            </ul>\r\n            <div className=\"table-divider\"></div>\r\n            {/* Fifth row */}\r\n            <ul className=\"d-flex list-unstyled\">\r\n              {\r\n                this.state.fifthRow.map((num, index, arr) =>\r\n                  <button\r\n                    key={num.n + index + arr}\r\n                    className={num.className}\r\n                    value={num.n}\r\n                    onClick={() => this.numsSelectionHandler(num.n, \"fifthRow\")}>\r\n                    <Chip\r\n                      id={num.n}\r\n                      active={num.visible} />\r\n                  </button>)\r\n              }\r\n            </ul>\r\n            <div className=\"table-divider\"></div>\r\n          </div>\r\n          <div className=\"align-self-start\">\r\n            <div className=\"table-divider\"></div>\r\n            <ul className=\"list-unstyled\">\r\n              {\r\n                this.state.columnRight.map((num, index, arr) =>\r\n                  <li className={num.className}\r\n                    key={num.n + index + arr}>\r\n                    <button\r\n                      className=\"blues\"\r\n                      value={num.n}\r\n                      onClick={() => this.numsSelectionHandler(num.n, \"columnRight\")}>\r\n                      <Chip\r\n                        id={num.n}\r\n                        active={num.visible} />\r\n                    </button>\r\n                  </li>\r\n                )\r\n              }\r\n            </ul>\r\n          </div>\r\n        </div >\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default RouletteTable;\r\n\r\n\r\n","import React from 'react';\nimport './App.css';\n\nimport Weel from './components/weel/Weel';\nimport RouletteTable from './components/table/Table';\nimport { Container, Row, Col, Image } from 'react-bootstrap';\nimport { GiDiamonds } from 'react-icons/gi';\n\nimport firstRow from './components/table/rows/FirstRow.json';\nimport firstBorder from './components/table/rows/FirstBorder.json';\nimport secondRow from './components/table/rows/SecondRow.json';\nimport secondBorder from './components/table/rows/SecondBorder.json';\nimport thirdRow from './components/table/rows/ThirdRow.json';\nimport thirdBorder from './components/table/rows/ThirdBorder.json';\nimport fourthRow from './components/table/rows/FourthRow.json';\nimport fifthRow from './components/table/rows/FifthRow.json';\nimport columnLeft from './components/table/rows/ColumnLeft.json';\nimport columnRight from './components/table/rows/ColumnRight.json';\n\n\nclass App extends React.Component {\n\n  state = {\n    num: \"\", //winning number\n    arr: [], //array of bets\n    count: 0, //spins count\n    wins: 0, //wins count\n    chip: 10, //chip value\n    coins: 100000, //coins count\n    losses: 0, //losses count\n    message: \"Put your bets and spin the weel!\", //message\n    extArr: [], //little trick: pushing number here if user win, so if it's empty, user loose\n    //my JSON rows\n    firstRow, firstBorder, secondRow, secondBorder, thirdRow, thirdBorder, fourthRow, fifthRow, columnLeft, columnRight\n  }\n\n  //declaring here all the combinations, easier this way\n  twoByOneFirst = [\"3\", \"6\", \"2\", \"12\", \"15\", \"18\", \"21\", \"24\", \"27\", \"30\", \"33\", \"36\"];\n  twoByOneSecond = [\"2\", \"5\", \"8\", \"11\", \"14\", \"17\", \"20\", \"23\", \"26\", \"29\", \"32\", \"35\"];\n  twoByOneThird = [\"1\", \"4\", \"7\", \"10\", \"13\", \"16\", \"19\", \"22\", \"25\", \"28\", \"31\", \"34\"];\n  firstTwelves = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"];\n  secondTwelves = [\"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\"];\n  thirdTwelves = [\"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\"];\n  oneToEighteen = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\"];\n  nineteenToThirtySix = [\"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\"];\n  black = [\"2\", \"4\", \"6\", \"8\", \"10\", \"11\", \"13\", \"15\", \"17\", \"20\", \"22\", \"24\", \"26\", \"28\", \"29\", \"31\", \"33\", \"35\"];\n  red = ['1', '3', '5', '7', '9', '12', '14', '16', '18', '19', '21', '23', '25', '27', '30', '32', '34', '36'];\n  even = [\"2\", \"4\", \"6\", \"8\", \"10\", \"12\", \"14\", \"16\", \"18\", \"20\", \"22\", \"24\", \"26\", \"28\", \"30\", \"32\", \"34\", \"36\"];\n  odd = ['1', '3', '5', '7', '9', '11', '13', '15', '17', '19', '21', '23', '25', '27', '29', '31', '33', '35'];\n\n\n  componentDidMount() {\n    //grab user data from database and set state with that data\n    \n  }\n\n\n  //handling losing\n  userLost = () => {\n    //update state for message and losses \n    this.setState({\n      message: `No luck this time!`,\n      losses: this.state.losses + 1,\n    }, () => {\n      //creating the object to send to mongodb and putting in callback to make sure the state is updated before sending data to database\n     \n\n      //and reseting the game\n      this.resetGame();\n    });\n\n  }\n\n  //handling winning\n\n  //passing multiplier to calcolate how much our user win\n  userWin = (multi) => {\n    //updating state for message, wins and coins\n    this.setState({\n      message: `You win ${multi * parseInt(this.state.chip)} coins!`,\n      wins: this.state.wins + 1,\n      coins: this.state.coins + (multi * parseInt(this.state.chip))\n    }, () => {\n      //creating the object to send to mongodb and putting in callback to make sure the state is updated before sending data to database\n      \n\n      //and reseting the game\n      this.resetGame();\n    });\n\n\n  }\n\n  //reset game function: emtying the array and setting all the chips to invisible state\n  resetGame = () => {\n    this.setState({\n      arr: [],\n      num: \"\",\n      firstRow: firstRow.map(num => {\n        num.visible = false;\n        return num;\n      }),\n      firstBorder: firstBorder.map(num => {\n        num.visible = false\n        return num;\n      }),\n      secondRow: secondRow.map(num => {\n        num.visible = false;\n        return num;\n      }),\n      secondBorder: secondBorder.map(num => {\n        num.visible = false;\n        return num;\n      }),\n      thirdRow: thirdRow.map(num => {\n        num.visible = false;\n        return num;\n      }),\n      thirdBorder: thirdBorder.map(num => {\n        num.visible = false;\n        return num;\n      }),\n      fourthRow: fourthRow.map(num => {\n        num.visible = false;\n        return num;\n      }),\n      fifthRow: fifthRow.map(num => {\n        num.visible = false;\n        return num;\n      }),\n      columnLeft: columnLeft.map(num => {\n        num.visible = false;\n        return num;\n      }),\n      columnRight: columnRight.map(num => {\n        num.visible = false;\n        return num;\n      })\n    });\n  }\n\n  //finding out if winning number is in any of the arrays\n  determineValidBets = (length, element, num, multiplier) => {\n    let extArr = [...this.state.extArr];\n    let lunghezza = element.length;\n    if (lunghezza === length) {\n      let filtering = element.filter(isItMyNum => isItMyNum == num);\n      if (filtering == num) {\n        extArr.push(num);\n        this.setState({ extArr });\n        this.userWin(multiplier);\n        console.log(this.state.extArr);\n      }\n    }\n  }\n\n  //little different here, checking by name and not the length of the array\n  determineValidBetsColFive = (name, element, arrName, num, multiplier) => {\n    let extArr = [...this.state.extArr];\n    if (element === name) {\n      let filtered = arrName.filter(item => item == num);\n      if (filtered == num) {\n        extArr.push(num);\n        this.setState({ extArr })\n        this.userWin(multiplier)\n        console.log(this.state.extArr);\n      }\n    }\n  }\n\n  //gonna pass this function as props to my Weel.js, so i can update it back with the winning number and determine if user won or loose\n  updateNum = (num) => {\n\n    this.setState({ num, count: this.state.count + 1 }); //i'm getting number, that's one spin, updating state with this info\n\n    //map the array of bets\n    this.state.arr.map(item => {\n\n      if (item === num) { //if it's just a single number\n        this.userWin(35); //multiplier is 35, user win a bunch of coins\n      }\n\n      //here gonna filter the mini-arrays (borders, columns etc.) and see if winner number is present in any of them\n\n      //if item is not string, means it's an array, so i am going to map it in my determineValidBets function\n      if (typeof item !== \"string\") {\n\n        this.determineValidBets(2, item, num, 17);\n        this.determineValidBets(3, item, num, 11);\n        this.determineValidBets(4, item, num, 8);\n        this.determineValidBets(6, item, num, 5);\n        //otherwise it's a string (even, odd etc), so before mapping i have to check if the element name is in my array and then map that element\n      } else {\n        this.determineValidBetsColFive(\"Even\", item, this.even, num, 1);\n        this.determineValidBetsColFive(\"Odd\", item, this.odd, num, 1);\n        this.determineValidBetsColFive(\"Black\", item, this.black, num, 1);\n        this.determineValidBetsColFive(\"Red\", item, this.red, num, 1);\n        this.determineValidBetsColFive(\"1 to 18\", item, this.oneToEighteen, num, 1);\n        this.determineValidBetsColFive(\"19 to 36\", item, this.nineteenToThirtySix, num, 1);\n        this.determineValidBetsColFive(\"3rd 12\", item, this.thirdTwelves, num, 1);\n        this.determineValidBetsColFive(\"2nd 12\", item, this.secondTwelves, num, 1);\n        this.determineValidBetsColFive(\"1st 12\", item, this.firstTwelves, num, 1);\n        this.determineValidBetsColFive(\"2:1:1\", item, this.twoByOneFirst, num, 2);\n        this.determineValidBetsColFive(\"2:1:2\", item, this.twoByOneSecond, num, 2);\n        this.determineValidBetsColFive(\"2:1:3\", item, this.twoByOneThird, num, 2);\n      }\n    });\n\n    //if there is nothing in existing numbers array, means user lost, firing the respective function\n    if (this.state.extArr.length === 0) {\n      this.userLost();\n    }\n  }\n\n  //gonna pass this function as props to my Table.js, so i can update it back\n  updateArr = (arr) => {\n    this.setState({ arr })\n  }\n\n  //gonna pass this function as props to my Table.js, so i can update it back\n  updateCoins = (coins) => {\n    this.setState({ coins })\n  }\n\n  //gonna pass this function as props to my Table.js, so i can update it back\n  updateRow = (row, val) => {\n    this.setState({ [row]: val })\n  }\n\n  render() {\n    return (\n      <Container>\n        <Row className=\"justify-items-center pt-2\">\n        <Image src=\"/resources/shic_logo2.png\" className=\"img-fluid mx-auto logo\" />\n          <Container fluid className=\"table\">\n            <Row>\n              <Col className=\"mx-5\">\n                <RouletteTable\n                  //ROWS//\n                  firstRow={this.state.firstRow}\n                  firstBorder={this.state.firstBorder}\n                  secondRow={this.state.secondRow}\n                  secondBorder={this.state.secondBorder}\n                  thirdRow={this.state.thirdRow}\n                  thirdBorder={this.state.thirdBorder}\n                  fourthRow={this.state.fourthRow}\n                  fifthRow={this.state.fifthRow}\n                  columnLeft={this.state.columnLeft}\n                  columnRight={this.state.columnRight}\n                  //END ROWS//\n                  updateRow={this.updateRow}\n                  updateArr={this.updateArr}\n                  updateCoins={this.updateCoins}\n                  num={this.state.num}\n                  arr={this.state.arr}\n                  count={this.state.count}\n                  coins={this.state.coins}\n                  chip={this.state.chip}\n                />\n                <Row className=\"bg-red bg-verdict align-items-center\">\n                  <Col md={4} className=\"d-flex align-items-center coins-col justify-content-center\">\n                    <h4 className=\"m-0\">${this.state.coins}</h4>\n                  </Col>\n                  <Col md={8}>\n                    <div className=\"text-center\">\n                      <h6 className=\"text-uppercase\">{this.state.message}</h6>\n                    </div>\n                    <div className=\"text-center\">\n                      {/* <h6>Your bets: <span>{this.state.arr.join(\", \")}</span></h6> */}\n                      <div className=\"divider-line divider-line-center divider-line-linear-gradient w-100 mx-auto my-4\">\n                        <GiDiamonds className=\"diamond-line-icon\" />\n                      </div>\n                      <ul className=\"list-inline\">\n                        <li className=\"list-inline-item\">Spins: {this.state.count}</li>\n                        <li className=\"list-inline-item\">Wins: {this.state.wins}</li>\n                        <li className=\"list-inline-item\">Losses: {this.state.losses}</li>\n                      </ul>\n                    </div>\n                  </Col>\n                </Row>\n              </Col>\n              <Col className=\"align-self-center\">\n                <Weel\n                  updateNum={this.updateNum}\n                  num={this.state.num}\n                  arr={this.state.arr}\n                  count={this.state.count}\n                />\n              </Col>\n            </Row>\n          </Container>\n          <Container fluid className=\"table\">\n            <Row>\n              <Col className=\"text-light-gold\">\n              Your bets: {this.state.arr.join(\", \")}\n              </Col>\n            </Row>\n            \n          </Container>\n        </Row>\n      </Container>\n    )\n  }\n}\n\nexport default App;\n\n\n\n  //STILL NEED TO CREATE FUNCTIONALITY FOR \n\n  //Basket, or a five number bet, and allows players to bet on the zero, double zero, 1, 2, and 3. Payout – 6:1.\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}